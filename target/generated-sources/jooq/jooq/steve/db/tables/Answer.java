/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables;


import java.util.Arrays;
import java.util.List;

import jooq.steve.db.Keys;
import jooq.steve.db.Trabm2Eng2;
import jooq.steve.db.tables.records.AnswerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answer extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trabm2_eng2.answer</code>
     */
    public static final Answer ANSWER = new Answer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>trabm2_eng2.answer.answer_pk</code>.
     */
    public final TableField<AnswerRecord, Integer> ANSWER_PK = createField(DSL.name("answer_pk"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>trabm2_eng2.answer.user_pk</code>.
     */
    public final TableField<AnswerRecord, Integer> USER_PK = createField(DSL.name("user_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trabm2_eng2.answer.question_pk</code>.
     */
    public final TableField<AnswerRecord, Integer> QUESTION_PK = createField(DSL.name("question_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>trabm2_eng2.answer.answer_text</code>.
     */
    public final TableField<AnswerRecord, String> ANSWER_TEXT = createField(DSL.name("answer_text"), SQLDataType.CLOB.nullable(false), this, "");

    private Answer(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answer(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trabm2_eng2.answer</code> table reference
     */
    public Answer(String alias) {
        this(DSL.name(alias), ANSWER);
    }

    /**
     * Create an aliased <code>trabm2_eng2.answer</code> table reference
     */
    public Answer(Name alias) {
        this(alias, ANSWER);
    }

    /**
     * Create a <code>trabm2_eng2.answer</code> table reference
     */
    public Answer() {
        this(DSL.name("answer"), null);
    }

    public <O extends Record> Answer(Table<O> child, ForeignKey<O, AnswerRecord> key) {
        super(child, key, ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trabm2Eng2.TRABM2_ENG2;
    }

    @Override
    public Identity<AnswerRecord, Integer> getIdentity() {
        return (Identity<AnswerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.KEY_ANSWER_PRIMARY;
    }

    @Override
    public List<ForeignKey<AnswerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ANSWER_USER_PK, Keys.FK_ANSWER_QUESTION_PK);
    }

    private transient User _user;
    private transient Question _question;

    /**
     * Get the implicit join path to the <code>trabm2_eng2.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_ANSWER_USER_PK);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>trabm2_eng2.question</code>
     * table.
     */
    public Question question() {
        if (_question == null)
            _question = new Question(this, Keys.FK_ANSWER_QUESTION_PK);

        return _question;
    }

    @Override
    public Answer as(String alias) {
        return new Answer(DSL.name(alias), this);
    }

    @Override
    public Answer as(Name alias) {
        return new Answer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(String name) {
        return new Answer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(Name name) {
        return new Answer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
