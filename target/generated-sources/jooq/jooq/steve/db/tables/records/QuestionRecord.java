/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables.records;


import jooq.steve.db.tables.Question;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionRecord extends UpdatableRecordImpl<QuestionRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>trabm2_eng2.question.question_pk</code>.
     */
    public void setQuestionPk(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>trabm2_eng2.question.question_pk</code>.
     */
    public Integer getQuestionPk() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>trabm2_eng2.question.user_pk</code>.
     */
    public void setUserPk(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>trabm2_eng2.question.user_pk</code>.
     */
    public Integer getUserPk() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>trabm2_eng2.question.question_text</code>.
     */
    public void setQuestionText(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>trabm2_eng2.question.question_text</code>.
     */
    public String getQuestionText() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Question.QUESTION.QUESTION_PK;
    }

    @Override
    public Field<Integer> field2() {
        return Question.QUESTION.USER_PK;
    }

    @Override
    public Field<String> field3() {
        return Question.QUESTION.QUESTION_TEXT;
    }

    @Override
    public Integer component1() {
        return getQuestionPk();
    }

    @Override
    public Integer component2() {
        return getUserPk();
    }

    @Override
    public String component3() {
        return getQuestionText();
    }

    @Override
    public Integer value1() {
        return getQuestionPk();
    }

    @Override
    public Integer value2() {
        return getUserPk();
    }

    @Override
    public String value3() {
        return getQuestionText();
    }

    @Override
    public QuestionRecord value1(Integer value) {
        setQuestionPk(value);
        return this;
    }

    @Override
    public QuestionRecord value2(Integer value) {
        setUserPk(value);
        return this;
    }

    @Override
    public QuestionRecord value3(String value) {
        setQuestionText(value);
        return this;
    }

    @Override
    public QuestionRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QuestionRecord
     */
    public QuestionRecord() {
        super(Question.QUESTION);
    }

    /**
     * Create a detached, initialised QuestionRecord
     */
    public QuestionRecord(Integer questionPk, Integer userPk, String questionText) {
        super(Question.QUESTION);

        setQuestionPk(questionPk);
        setUserPk(userPk);
        setQuestionText(questionText);
    }
}
